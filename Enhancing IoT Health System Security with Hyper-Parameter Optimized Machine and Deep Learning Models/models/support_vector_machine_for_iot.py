# -*- coding: utf-8 -*-
"""Support Vector Machine for IOT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEIUvrDHDi_D6Kxrv_6OVTsIf-QvRDfQ
"""

"""
   Model 2 - Support Vector Classifier (SVC):
   Similar to RF Model, we'll fit SVC on our training dataset and check its performance on test data.
"""
# instantiate and fit the Linear SVC to train data

clf = LinearSVC(random_state=0, tol=1e-5)
clf.fit(X_train_smote, y_train_smote)

# check parameters of SVM
clf.get_params()

# Evaluate the model
print('Accuracy on test data is: %.4f' % clf.score(X_test, y_test))

# making predictions on test set
start = time.time()

y_pred_svc = clf.predict(X_test)

end = time.time()
print('Time Taken: %.3f seconds' % (end-start))

print('Accuracy:', accuracy_score(y_test, y_pred_svc))
print('F1 score:', f1_score(y_test, y_pred_svc, average='weighted'))
print('Recall:', recall_score(y_test, y_pred_svc, average='weighted'))
print('Precision:', precision_score(y_test, y_pred_svc, average='weighted'))
print('\n clasification report:\n', classification_report(y_test, y_pred_svc))
print('\n confussion matrix:\n', Error_matrix(y_test, y_pred_svc))

performance_all['SVC_Model'] = accuracy_score(y_test, y_pred_svc), f1_score(y_test, y_pred_svc, average='weighted'), recall_score(y_test, y_pred_svc, average='weighted'), precision_score(y_test, y_pred_svc, average='weighted')

model2 = clf
all_models.append(model2)

# Plot Model's Error Matrix:

def plot_Error_matrix(cm, classes,
                          normalize=False,
                          title='Error matrix',
                          cmap=plt.cm.Blues):
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized Error matrix")
    else:
        print('Error matrix, without normalization')

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title, size = 20, fontweight='bold')
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45, fontsize=18)
    plt.yticks(tick_marks, classes, fontsize=18)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True Label', weight='bold').set_fontsize('18')
    plt.xlabel('Predicted Label', weight='bold').set_fontsize('18')
    plt.savefig('Error Matrix for Support Vector Machine Model.png')

cf_matrix = Error_matrix(y_test, y_pred_svc)
plt.figure(figsize=(15, 12))
plot_Error_matrix(cf_matrix, classes=['Normal', 'Backdoor Attack', 'injection Attack', 'password Attack', 'ddos Attack', 'ransomware Attack', 'xss Attack', 'scanning Attack'],
                      normalize = True, title='Error Matrix With Normalization - Support Vector Machine Model')
plt.show()