# -*- coding: utf-8 -*-
"""Preprocessing data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZX4MYbRAGTDVWhm6_wemfkFn0KEIi9dD
"""

"""
   B. Data Pre-processing - IoT All Dataset:
"""
#print(IoT_All_Dataset.info())

"""
   i. Make X & Y Variables from the Data:
"""
y_ = IoT_All_Dataset['label']
x_ = IoT_All_Dataset.iloc[:, :-2]

# label encode the target variable
y_ = LabelEncoder().fit_transform(y_)

# count the frequency of each class
count = Counter(y_)
print(count)

# summarize distribution
counter = Counter(y_)
for k,v in counter.items():
  per = v / len(y_) * 100
  print('Class=%d, n=%d (%.3f%%)' % (k, v, per))
# plot the distribution
title='IoT All Dataset before Data Augmentation'
classes=['Normal attack', 'Backdoor attack', 'Injection attack', 'Password attack', 'DDOS attack', 'Ransomware attack', 'XSS attack', 'Scanning attack']
pyplot.figure(figsize=(10, 6))
pyplot.bar(counter.keys(), counter.values())
pyplot.title(title, size = 20, fontweight='bold')
tick_marks = np.arange(len(classes))
pyplot.xticks(tick_marks, classes, rotation=45, fontsize=10)
pyplot.savefig('IoT All Dataset Before Data Augmentation.png')
pyplot.show()

"""
   ii. Data Splitting - 80% train set and 20% test set:
"""
X_train, X_test, y_train, y_test = train_test_split(x_, y_, test_size=0.20, random_state=42)

# create artificial data with SMOTE
# transform the dataset

oversample = SMOTE()
X_train_smote, y_train_smote = oversample.fit_resample(X_train, y_train)

# count number of records in each class
count = Counter(y_train_smote)
print(count)

# summarize distribution
counter = Counter(y_train_smote)
for k,v in counter.items():
  per = v / len(y_train_smote) * 100
  print('Class=%d, n=%d (%.3f%%)' % (k, v, per))
# plot the distribution
title='IoT All Dataset After Data Augmentation'
classes=['Normal attack', 'Backdoor attack', 'Injection attack', 'Password attack', 'DDOS attack', 'Ransomware attack', 'XSS attack', 'Scanning attack']
pyplot.figure(figsize=(10, 6))
pyplot.bar(counter.keys(), counter.values())
pyplot.title(title, size = 20, fontweight='bold')
tick_marks = np.arange(len(classes))
pyplot.xticks(tick_marks, classes, rotation=45, fontsize=10)
pyplot.savefig('IoT All Dataset After Data Augmentation.png')
pyplot.show()

"""
    Normalize the data:
"""
normalize = MinMaxScaler()
X_train_smote = normalize.fit_transform(X_train_smote)
X_test = normalize.transform(X_test)